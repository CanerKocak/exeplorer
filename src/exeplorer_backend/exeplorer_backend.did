type Account = record { owner : principal; subaccount : opt blob };
type AccountInfo = record { owner : principal; subaccount : opt blob };
type Burn = record {
  from : AccountInfo;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type Mint = record {
  to : AccountInfo;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type RejectionCode = variant {
  NoError;
  CanisterError;
  SysTransient;
  DestinationInvalid;
  Unknown;
  SysFatal;
  CanisterReject;
};
type Result = variant {
  Ok : record { text; text; nat; nat8; nat; nat };
  Err : text;
};
type Result_1 = variant {
  Ok : record { TransactionRange };
  Err : record { RejectionCode; text };
};
type Result_2 = variant {
  Ok : record { nat };
  Err : record { RejectionCode; text };
};
type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  timestamp : nat64;
  index : nat;
  transfer : opt Transfer;
};
type TransactionRange = record { transactions : vec Transaction };
type Transfer = record {
  to : AccountInfo;
  fee : opt nat;
  from : AccountInfo;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
service : {
  get_token_info : () -> (Result);
  get_transactions : (nat, nat) -> (Result_1);
  icrc1_balance_of : (Account) -> (Result_2);
  icrc1_total_supply : () -> (Result_2);
}
